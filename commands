1. Создать двух пользователей (с помощью метода User.objects.create_user).
2. Создать два объекта модели Author, связанные с пользователями.
3. Добавить 4 категории в модель Category.
4. Добавить 2 статьи и 1 новость.
5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
8. Обновить рейтинги пользователей.
9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье

1 and 2
>>> user1 = User.objects.create(username='Ivan', first_name='Иван')
>>> Author.objects.create(authorUser=user1)
<Author: Author object (1)>
>>> user2 = User.objects.create(username='Petr', first_name='Петр')
>>> Author.objects.create(authorUser=user2)
<Author: Author object (2)>

3.
>>> Category.objects.create(name='Sport')
<Category: Category object (1)>
>>> Category.objects.create(name='Economy')
<Category: Category object (2)>
>>> Category.objects.create(name='Education')
<Category: Category object (3)>
>>> Category.objects.create(name='Politics')
<Category: Category object (4)>

4.
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ivan')), categoryType='NW',title='something title',text='something text')
<Post: Post object (1)>
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Ivan')), categoryType='AR',title='something title222',text='something text222')
<Post: Post object (2)>
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Petr')), categoryType='AR',title='something title333',text='something text333')
<Post: Post object (3)>

5.
>>> p1 = Post.objects.get(id=1)
>>> p2 = Post.objects.get(id=2)
>>> p3 = Post.objects.get(id=3)

>>> c1 = Category.objects.get(name='Sport')
>>> c2 = Category.objects.get(name='Economy')
>>> c3 = Category.objects.get(name='Education')
>>> c4 = Category.objects.get(name='Politics')

>>> p1.postCategory.add(c1,c2,c3)
>>> p2.postCategory.add(c2,c4)
>>> p3.postCategory.add(c2,c3,c4)

6.
>>> Comment.objects.create(commentUser=User.objects.get(username='Ivan'),commentPost=Post.objects.get(id=1), text='comment text1')
<Comment: Ivan>
>>> Comment.objects.create(commentUser=User.objects.get(username='Ivan'),commentPost=Post.objects.get(id=2), text='comment text2')
<Comment: Ivan>
>>> Comment.objects.create(commentUser=User.objects.get(username='Petr'),commentPost=Post.objects.get(id=3), text='comment text3')
<Comment: Petr>
>>> Comment.objects.create(commentUser=User.objects.get(username='Ivan'),commentPost=Post.objects.get(id=3), text='comment text3')
<Comment: Ivan>

7.
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=3).dislike()
>>> Post.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=2).dislike()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=3).like()

8.
>>> Author.objects.get(authorUser=User.objects.get(username='Ivan')).update_rating()
>>> Author.objects.get(authorUser=User.objects.get(username='Petr')).update_rating()

9.
>>> best = Author.objects.all().order_by('-ratingAuthor').values('authorUser','ratingAuthor')[0]
>>> print(best)

10.
bestID = Post.objects.all().order_by('-rating').values('id')[0]
best = Post.objects.get(id=bestID.get('id'))

>>> print(f'Date: {best.dateCreation}, Author: {best.author.authorUser.username}, Rating: {best.rating}, Title: {best.title}, Text preview: {best.preview()} ')


11.
 >>> print(Comment.objects.filter(commentPost = Post.objects.get(id=bestID.get('id'))).values('dateCreation', 'commentUser__username', 'text', 'rating'))
<QuerySet [{'dateCreation': datetime.datetime(2021, 9, 5, 8, 22, 27, 874407, tzinfo=<UTC>), 'commentUser__username': 'Ivan', 'text': 'comment text1', 'rating': 4}]>



